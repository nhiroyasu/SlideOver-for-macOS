///
/// @Generated by Mockolo
///



import AppKit
import Cocoa
import Combine
import Foundation
import Magnet
import QuartzCore
import Swinject
import WebKit
@testable import Fixture_in_Picture


class SlideOverWindowActionMock: SlideOverWindowAction {
    init() { }


    private(set) var showWindowCallCount = 0
    var showWindowHandler: (() -> ())?
    func showWindow()  {
        showWindowCallCount += 1
        if let showWindowHandler = showWindowHandler {
            showWindowHandler()
        }
        
    }

    private(set) var inputSearchBarCallCount = 0
    var inputSearchBarArgValues = [String]()
    var inputSearchBarHandler: ((String) -> ())?
    func inputSearchBar(input: String)  {
        inputSearchBarCallCount += 1
        inputSearchBarArgValues.append(input)
        if let inputSearchBarHandler = inputSearchBarHandler {
            inputSearchBarHandler(input)
        }
        
    }

    private(set) var didTapInitialPageItemCallCount = 0
    var didTapInitialPageItemArgValues = [URL?]()
    var didTapInitialPageItemHandler: ((URL?) -> ())?
    func didTapInitialPageItem(currentUrl url: URL?)  {
        didTapInitialPageItemCallCount += 1
        didTapInitialPageItemArgValues.append(url)
        if let didTapInitialPageItemHandler = didTapInitialPageItemHandler {
            didTapInitialPageItemHandler(url)
        }
        
    }

    private(set) var didChangePageCallCount = 0
    var didChangePageArgValues = [URL?]()
    var didChangePageHandler: ((URL?) -> ())?
    func didChangePage(url: URL?)  {
        didChangePageCallCount += 1
        didChangePageArgValues.append(url)
        if let didChangePageHandler = didChangePageHandler {
            didChangePageHandler(url)
        }
        
    }

    private(set) var didChangePositionCallCount = 0
    var didChangePositionArgValues = [SlideOverKind]()
    var didChangePositionHandler: ((SlideOverKind) -> ())?
    func didChangePosition(kind: SlideOverKind)  {
        didChangePositionCallCount += 1
        didChangePositionArgValues.append(kind)
        if let didChangePositionHandler = didChangePositionHandler {
            didChangePositionHandler(kind)
        }
        
    }

    private(set) var didUpdateProgressCallCount = 0
    var didUpdateProgressArgValues = [Double]()
    var didUpdateProgressHandler: ((Double) -> ())?
    func didUpdateProgress(value: Double)  {
        didUpdateProgressCallCount += 1
        didUpdateProgressArgValues.append(value)
        if let didUpdateProgressHandler = didUpdateProgressHandler {
            didUpdateProgressHandler(value)
        }
        
    }

    private(set) var didTapDisplayTypeCallCount = 0
    var didTapDisplayTypeHandler: (() -> ())?
    func didTapDisplayType()  {
        didTapDisplayTypeCallCount += 1
        if let didTapDisplayTypeHandler = didTapDisplayTypeHandler {
            didTapDisplayTypeHandler()
        }
        
    }

    private(set) var didTapChangingPositionButtonCallCount = 0
    var didTapChangingPositionButtonArgValues = [SlideOverKind]()
    var didTapChangingPositionButtonHandler: ((SlideOverKind) -> ())?
    func didTapChangingPositionButton(type: SlideOverKind)  {
        didTapChangingPositionButtonCallCount += 1
        didTapChangingPositionButtonArgValues.append(type)
        if let didTapChangingPositionButtonHandler = didTapChangingPositionButtonHandler {
            didTapChangingPositionButtonHandler(type)
        }
        
    }

    private(set) var didTapUpdateUserAgentCallCount = 0
    var didTapUpdateUserAgentArgValues = [UserAgent]()
    var didTapUpdateUserAgentHandler: ((UserAgent) -> ())?
    func didTapUpdateUserAgent(_ userAgent: UserAgent)  {
        didTapUpdateUserAgentCallCount += 1
        didTapUpdateUserAgentArgValues.append(userAgent)
        if let didTapUpdateUserAgentHandler = didTapUpdateUserAgentHandler {
            didTapUpdateUserAgentHandler(userAgent)
        }
        
    }

    private(set) var didTapHideWindowCallCount = 0
    var didTapHideWindowHandler: (() -> ())?
    func didTapHideWindow()  {
        didTapHideWindowCallCount += 1
        if let didTapHideWindowHandler = didTapHideWindowHandler {
            didTapHideWindowHandler()
        }
        
    }

    private(set) var didTapHelpCallCount = 0
    var didTapHelpHandler: (() -> ())?
    func didTapHelp()  {
        didTapHelpCallCount += 1
        if let didTapHelpHandler = didTapHelpHandler {
            didTapHelpHandler()
        }
        
    }

    private(set) var didTapReappearButtonCallCount = 0
    var didTapReappearButtonHandler: (() -> ())?
    func didTapReappearButton()  {
        didTapReappearButtonCallCount += 1
        if let didTapReappearButtonHandler = didTapReappearButtonHandler {
            didTapReappearButtonHandler()
        }
        
    }
}

class UIQueueMock: UIQueue {
    init() { }


    private(set) var mainAsyncCallCount = 0
    var mainAsyncHandler: ((@escaping () -> Void) -> ())?
    func mainAsync(execute work: @escaping () -> Void)  {
        mainAsyncCallCount += 1
        if let mainAsyncHandler = mainAsyncHandler {
            mainAsyncHandler(work)
        }
        
    }

    private(set) var mainAsyncAfterCallCount = 0
    var mainAsyncAfterArgValues = [DispatchTime]()
    var mainAsyncAfterHandler: ((DispatchTime, @escaping () -> Void) -> ())?
    func mainAsyncAfter(deadline: DispatchTime, execute work: @escaping () -> Void)  {
        mainAsyncAfterCallCount += 1
        mainAsyncAfterArgValues.append(deadline)
        if let mainAsyncAfterHandler = mainAsyncAfterHandler {
            mainAsyncAfterHandler(deadline, work)
        }
        
    }
}

class URLEncodeServiceMock: URLEncodeService {
    init() { }


    private(set) var encodeCallCount = 0
    var encodeArgValues = [String]()
    var encodeHandler: ((String) -> (String))?
    func encode(text: String) -> String {
        encodeCallCount += 1
        encodeArgValues.append(text)
        if let encodeHandler = encodeHandler {
            return encodeHandler(text)
        }
        return ""
    }
}

class URLValidationServiceMock: URLValidationService {
    init() { }


    private(set) var isUrlCallCount = 0
    var isUrlArgValues = [String]()
    var isUrlHandler: ((String) -> (Bool))?
    func isUrl(text: String) -> Bool {
        isUrlCallCount += 1
        isUrlArgValues.append(text)
        if let isUrlHandler = isUrlHandler {
            return isUrlHandler(text)
        }
        return false
    }
}

class UserSettingServiceMock: UserSettingService {
    init() { }
    init(initialPage: URL? = nil, latestPage: URL? = nil, latestPosition: SlideOverKind? = nil, latestUserAgent: UserAgent? = nil, isNotAllowedGlobalShortcut: Bool = false, latestShownFeatureVersion: String? = nil) {
        self.initialPage = initialPage
        self.latestPage = latestPage
        self.latestPosition = latestPosition
        self.latestUserAgent = latestUserAgent
        self.isNotAllowedGlobalShortcut = isNotAllowedGlobalShortcut
        self.latestShownFeatureVersion = latestShownFeatureVersion
    }


    private(set) var initialPageSetCallCount = 0
    var initialPage: URL? = nil { didSet { initialPageSetCallCount += 1 } }

    private(set) var latestPageSetCallCount = 0
    var latestPage: URL? = nil { didSet { latestPageSetCallCount += 1 } }

    private(set) var latestPositionSetCallCount = 0
    var latestPosition: SlideOverKind? = nil { didSet { latestPositionSetCallCount += 1 } }

    private(set) var latestUserAgentSetCallCount = 0
    var latestUserAgent: UserAgent? = nil { didSet { latestUserAgentSetCallCount += 1 } }

    private(set) var isNotAllowedGlobalShortcutSetCallCount = 0
    var isNotAllowedGlobalShortcut: Bool = false { didSet { isNotAllowedGlobalShortcutSetCallCount += 1 } }

    private(set) var latestShownFeatureVersionSetCallCount = 0
    var latestShownFeatureVersion: String? = nil { didSet { latestShownFeatureVersionSetCallCount += 1 } }
}

class WebViewServiceMock: WebViewService {
    init() { }


    private(set) var clearCacheCallCount = 0
    var clearCacheHandler: (() -> ())?
    func clearCache()  {
        clearCacheCallCount += 1
        if let clearCacheHandler = clearCacheHandler {
            clearCacheHandler()
        }
        
    }
}

public class InjectableMock: Injectable {
    public init() { }


    public private(set) var buildCallCount = 0
    public var buildArgValues = [Any]()
    public var buildHandler: ((Any) -> (Any))?
    public func build<T>(_ Type: T.Type) -> T {
        buildCallCount += 1
        buildArgValues.append(Type)
        if let buildHandler = buildHandler {
            return buildHandler(Type) as! T
        }
        fatalError("buildHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var buildSafeCallCount = 0
    public var buildSafeArgValues = [Any]()
    public var buildSafeHandler: ((Any) -> (Any?))?
    public func buildSafe<T>(_ Type: T.Type) -> T? {
        buildSafeCallCount += 1
        buildSafeArgValues.append(Type)
        if let buildSafeHandler = buildSafeHandler {
            return buildSafeHandler(Type) as? T
        }
        return nil
    }
}

class SlideOverViewableMock: SlideOverViewable {
    init() { }
    init(currentUrl: URL? = nil, progressBar: NSProgressIndicator!, webView: SlideOverWebView!) {
        self.currentUrl = currentUrl
        self._progressBar = progressBar
        self._webView = webView
    }


    private(set) var loadWebPageCallCount = 0
    var loadWebPageArgValues = [URL?]()
    var loadWebPageHandler: ((URL?) -> ())?
    func loadWebPage(url: URL?)  {
        loadWebPageCallCount += 1
        loadWebPageArgValues.append(url)
        if let loadWebPageHandler = loadWebPageHandler {
            loadWebPageHandler(url)
        }
        
    }

    private(set) var browserBackCallCount = 0
    var browserBackHandler: (() -> ())?
    func browserBack()  {
        browserBackCallCount += 1
        if let browserBackHandler = browserBackHandler {
            browserBackHandler()
        }
        
    }

    private(set) var browserForwardCallCount = 0
    var browserForwardHandler: (() -> ())?
    func browserForward()  {
        browserForwardCallCount += 1
        if let browserForwardHandler = browserForwardHandler {
            browserForwardHandler()
        }
        
    }

    private(set) var browserReloadCallCount = 0
    var browserReloadHandler: (() -> ())?
    func browserReload()  {
        browserReloadCallCount += 1
        if let browserReloadHandler = browserReloadHandler {
            browserReloadHandler()
        }
        
    }

    private(set) var currentUrlSetCallCount = 0
    var currentUrl: URL? = nil { didSet { currentUrlSetCallCount += 1 } }

    private(set) var progressBarSetCallCount = 0
    private var _progressBar: NSProgressIndicator!  { didSet { progressBarSetCallCount += 1 } }
    var progressBar: NSProgressIndicator! {
        get { return _progressBar }
        set { _progressBar = newValue }
    }

    private(set) var webViewSetCallCount = 0
    private var _webView: SlideOverWebView!  { didSet { webViewSetCallCount += 1 } }
    var webView: SlideOverWebView! {
        get { return _webView }
        set { _webView = newValue }
    }

    private(set) var showReappearLeftButtonCallCount = 0
    var showReappearLeftButtonHandler: ((@escaping () -> Void) -> ())?
    func showReappearLeftButton(completion: @escaping () -> Void)  {
        showReappearLeftButtonCallCount += 1
        if let showReappearLeftButtonHandler = showReappearLeftButtonHandler {
            showReappearLeftButtonHandler(completion)
        }
        
    }

    private(set) var showReappearRightButtonCallCount = 0
    var showReappearRightButtonHandler: ((@escaping () -> Void) -> ())?
    func showReappearRightButton(completion: @escaping () -> Void)  {
        showReappearRightButtonCallCount += 1
        if let showReappearRightButtonHandler = showReappearRightButtonHandler {
            showReappearRightButtonHandler(completion)
        }
        
    }

    private(set) var hideReappearLeftButtonCallCount = 0
    var hideReappearLeftButtonHandler: ((@escaping () -> Void) -> ())?
    func hideReappearLeftButton(completion: @escaping () -> Void)  {
        hideReappearLeftButtonCallCount += 1
        if let hideReappearLeftButtonHandler = hideReappearLeftButtonHandler {
            hideReappearLeftButtonHandler(completion)
        }
        
    }

    private(set) var hideReappearRightButtonCallCount = 0
    var hideReappearRightButtonHandler: ((@escaping () -> Void) -> ())?
    func hideReappearRightButton(completion: @escaping () -> Void)  {
        hideReappearRightButtonCallCount += 1
        if let hideReappearRightButtonHandler = hideReappearRightButtonHandler {
            hideReappearRightButtonHandler(completion)
        }
        
    }
}

class SlideOverWindowControllableMock: SlideOverWindowControllable {
    init() { }
    init(isMiniaturized: Bool = false, progressBar: NSProgressIndicator? = nil, action: SlideOverWindowAction = SlideOverWindowActionMock(), contentView: SlideOverViewable? = nil, webDisplayTypeItem: NSToolbarItem!) {
        self.isMiniaturized = isMiniaturized
        self.progressBar = progressBar
        self.action = action
        self.contentView = contentView
        self._webDisplayTypeItem = webDisplayTypeItem
    }


    private(set) var setBrowserBackCallCount = 0
    var setBrowserBackArgValues = [Bool]()
    var setBrowserBackHandler: ((Bool) -> ())?
    func setBrowserBack(enable: Bool)  {
        setBrowserBackCallCount += 1
        setBrowserBackArgValues.append(enable)
        if let setBrowserBackHandler = setBrowserBackHandler {
            setBrowserBackHandler(enable)
        }
        
    }

    private(set) var setBrowserForwardCallCount = 0
    var setBrowserForwardArgValues = [Bool]()
    var setBrowserForwardHandler: ((Bool) -> ())?
    func setBrowserForward(enable: Bool)  {
        setBrowserForwardCallCount += 1
        setBrowserForwardArgValues.append(enable)
        if let setBrowserForwardHandler = setBrowserForwardHandler {
            setBrowserForwardHandler(enable)
        }
        
    }

    private(set) var fixWindowCallCount = 0
    var fixWindowHandler: ((@escaping (NSWindow?) -> Void) -> ())?
    func fixWindow(handle: @escaping (NSWindow?) -> Void)  {
        fixWindowCallCount += 1
        if let fixWindowHandler = fixWindowHandler {
            fixWindowHandler(handle)
        }
        
    }

    private(set) var loadWebPageCallCount = 0
    var loadWebPageArgValues = [URL?]()
    var loadWebPageHandler: ((URL?) -> ())?
    func loadWebPage(url: URL?)  {
        loadWebPageCallCount += 1
        loadWebPageArgValues.append(url)
        if let loadWebPageHandler = loadWebPageHandler {
            loadWebPageHandler(url)
        }
        
    }

    private(set) var focusSearchBarCallCount = 0
    var focusSearchBarHandler: (() -> ())?
    func focusSearchBar()  {
        focusSearchBarCallCount += 1
        if let focusSearchBarHandler = focusSearchBarHandler {
            focusSearchBarHandler()
        }
        
    }

    private(set) var setWindowAlphaCallCount = 0
    var setWindowAlphaArgValues = [CGFloat]()
    var setWindowAlphaHandler: ((CGFloat) -> ())?
    func setWindowAlpha(_ value: CGFloat)  {
        setWindowAlphaCallCount += 1
        setWindowAlphaArgValues.append(value)
        if let setWindowAlphaHandler = setWindowAlphaHandler {
            setWindowAlphaHandler(value)
        }
        
    }

    private(set) var isMiniaturizedSetCallCount = 0
    var isMiniaturized: Bool = false { didSet { isMiniaturizedSetCallCount += 1 } }

    private(set) var progressBarSetCallCount = 0
    var progressBar: NSProgressIndicator? = nil { didSet { progressBarSetCallCount += 1 } }

    private(set) var actionSetCallCount = 0
    var action: SlideOverWindowAction = SlideOverWindowActionMock() { didSet { actionSetCallCount += 1 } }

    private(set) var contentViewSetCallCount = 0
    var contentView: SlideOverViewable? = nil { didSet { contentViewSetCallCount += 1 } }

    private(set) var webDisplayTypeItemSetCallCount = 0
    private var _webDisplayTypeItem: NSToolbarItem!  { didSet { webDisplayTypeItemSetCallCount += 1 } }
    var webDisplayTypeItem: NSToolbarItem! {
        get { return _webDisplayTypeItem }
        set { _webDisplayTypeItem = newValue }
    }

    private(set) var windowWillResizeHandlerSetCallCount = 0
    var windowWillResizeHandler: ((NSWindow, NSSize) -> NSSize)? = nil { didSet { windowWillResizeHandlerSetCallCount += 1 } }
}

class AlertServiceMock: AlertService {
    init() { }


    private(set) var alertCallCount = 0
    var alertArgValues = [String]()
    var alertHandler: ((String, @escaping () -> Void) -> ())?
    func alert(msg: String, completionHandler: @escaping () -> Void)  {
        alertCallCount += 1
        alertArgValues.append(msg)
        if let alertHandler = alertHandler {
            alertHandler(msg, completionHandler)
        }
        
    }
}

class SlideOverWebViewMenuDelegateMock: SlideOverWebViewMenuDelegate {
    init() { }


    private(set) var didTapCopyLinkCallCount = 0
    var didTapCopyLinkHandler: (() -> ())?
    func didTapCopyLink()  {
        didTapCopyLinkCallCount += 1
        if let didTapCopyLinkHandler = didTapCopyLinkHandler {
            didTapCopyLinkHandler()
        }
        
    }

    private(set) var didTapOpenBrowserCallCount = 0
    var didTapOpenBrowserHandler: (() -> ())?
    func didTapOpenBrowser()  {
        didTapOpenBrowserCallCount += 1
        if let didTapOpenBrowserHandler = didTapOpenBrowserHandler {
            didTapOpenBrowserHandler()
        }
        
    }

    private(set) var didTapRegisterInitialPageCallCount = 0
    var didTapRegisterInitialPageHandler: (() -> ())?
    func didTapRegisterInitialPage()  {
        didTapRegisterInitialPageCallCount += 1
        if let didTapRegisterInitialPageHandler = didTapRegisterInitialPageHandler {
            didTapRegisterInitialPageHandler()
        }
        
    }

    private(set) var didTapWindowLayoutCallCount = 0
    var didTapWindowLayoutArgValues = [SlideOverKind]()
    var didTapWindowLayoutHandler: ((SlideOverKind) -> ())?
    func didTapWindowLayout(type: SlideOverKind)  {
        didTapWindowLayoutCallCount += 1
        didTapWindowLayoutArgValues.append(type)
        if let didTapWindowLayoutHandler = didTapWindowLayoutHandler {
            didTapWindowLayoutHandler(type)
        }
        
    }

    private(set) var didTapUserAgentCallCount = 0
    var didTapUserAgentArgValues = [UserAgent]()
    var didTapUserAgentHandler: ((UserAgent) -> ())?
    func didTapUserAgent(_ userAgent: UserAgent)  {
        didTapUserAgentCallCount += 1
        didTapUserAgentArgValues.append(userAgent)
        if let didTapUserAgentHandler = didTapUserAgentHandler {
            didTapUserAgentHandler(userAgent)
        }
        
    }

    private(set) var didTapHideWindowCallCount = 0
    var didTapHideWindowHandler: (() -> ())?
    func didTapHideWindow()  {
        didTapHideWindowCallCount += 1
        if let didTapHideWindowHandler = didTapHideWindowHandler {
            didTapHideWindowHandler()
        }
        
    }

    private(set) var didTapHelpCallCount = 0
    var didTapHelpHandler: (() -> ())?
    func didTapHelp()  {
        didTapHelpCallCount += 1
        if let didTapHelpHandler = didTapHelpHandler {
            didTapHelpHandler()
        }
        
    }
}

class DependenciesMock: Dependencies {
    init() { }


    private(set) var registerCallCount = 0
    var registerArgValues = [Any]()
    var registerHandler: ((Any, @escaping (Resolver) -> Any) -> ())?
    func register<T>(_ Type: T.Type, factory: @escaping (Resolver) -> T)  {
        registerCallCount += 1
        registerArgValues.append(Type)
        if let registerHandler = registerHandler {
            registerHandler(Type, factory)
        }
        
    }

    private(set) var registerAsSingletonCallCount = 0
    var registerAsSingletonArgValues = [Any]()
    var registerAsSingletonHandler: ((Any, @escaping (Resolver) -> Any) -> ())?
    func registerAsSingleton<T>(_ Type: T.Type, factory: @escaping (Resolver) -> T)  {
        registerAsSingletonCallCount += 1
        registerAsSingletonArgValues.append(Type)
        if let registerAsSingletonHandler = registerAsSingletonHandler {
            registerAsSingletonHandler(Type, factory)
        }
        
    }
}

class SlideOverWindowPresenterMock: SlideOverWindowPresenter {
    init() { }


    private(set) var fixWindowCallCount = 0
    var fixWindowArgValues = [SlideOverKind]()
    var fixWindowHandler: ((SlideOverKind) -> ())?
    func fixWindow(type: SlideOverKind)  {
        fixWindowCallCount += 1
        fixWindowArgValues.append(type)
        if let fixWindowHandler = fixWindowHandler {
            fixWindowHandler(type)
        }
        
    }

    private(set) var adjustWindowCallCount = 0
    var adjustWindowHandler: (() -> ())?
    func adjustWindow()  {
        adjustWindowCallCount += 1
        if let adjustWindowHandler = adjustWindowHandler {
            adjustWindowHandler()
        }
        
    }

    private(set) var reverseWindowCallCount = 0
    var reverseWindowHandler: (() -> ())?
    func reverseWindow()  {
        reverseWindowCallCount += 1
        if let reverseWindowHandler = reverseWindowHandler {
            reverseWindowHandler()
        }
        
    }

    private(set) var setInitialPageCallCount = 0
    var setInitialPageArgValues = [URL?]()
    var setInitialPageHandler: ((URL?) -> ())?
    func setInitialPage(url: URL?)  {
        setInitialPageCallCount += 1
        setInitialPageArgValues.append(url)
        if let setInitialPageHandler = setInitialPageHandler {
            setInitialPageHandler(url)
        }
        
    }

    private(set) var loadWebPageCallCount = 0
    var loadWebPageArgValues = [URL?]()
    var loadWebPageHandler: ((URL?) -> ())?
    func loadWebPage(url: URL?)  {
        loadWebPageCallCount += 1
        loadWebPageArgValues.append(url)
        if let loadWebPageHandler = loadWebPageHandler {
            loadWebPageHandler(url)
        }
        
    }

    private(set) var openBrowserCallCount = 0
    var openBrowserArgValues = [URL?]()
    var openBrowserHandler: ((URL?) -> ())?
    func openBrowser(url: URL?)  {
        openBrowserCallCount += 1
        openBrowserArgValues.append(url)
        if let openBrowserHandler = openBrowserHandler {
            openBrowserHandler(url)
        }
        
    }

    private(set) var showHttpAlertCallCount = 0
    var showHttpAlertHandler: (() -> ())?
    func showHttpAlert()  {
        showHttpAlertCallCount += 1
        if let showHttpAlertHandler = showHttpAlertHandler {
            showHttpAlertHandler()
        }
        
    }

    private(set) var showErrorAlertCallCount = 0
    var showErrorAlertHandler: (() -> ())?
    func showErrorAlert()  {
        showErrorAlertCallCount += 1
        if let showErrorAlertHandler = showErrorAlertHandler {
            showErrorAlertHandler()
        }
        
    }

    private(set) var setProgressCallCount = 0
    var setProgressArgValues = [Double]()
    var setProgressHandler: ((Double) -> ())?
    func setProgress(value: Double)  {
        setProgressCallCount += 1
        setProgressArgValues.append(value)
        if let setProgressHandler = setProgressHandler {
            setProgressHandler(value)
        }
        
    }

    private(set) var reloadCallCount = 0
    var reloadHandler: (() -> ())?
    func reload()  {
        reloadCallCount += 1
        if let reloadHandler = reloadHandler {
            reloadHandler()
        }
        
    }

    private(set) var setUserAgentCallCount = 0
    var setUserAgentArgValues = [UserAgent]()
    var setUserAgentHandler: ((UserAgent) -> ())?
    func setUserAgent(_ userAgent: UserAgent)  {
        setUserAgentCallCount += 1
        setUserAgentArgValues.append(userAgent)
        if let setUserAgentHandler = setUserAgentHandler {
            setUserAgentHandler(userAgent)
        }
        
    }

    private(set) var setResizeHandlerCallCount = 0
    var setResizeHandlerHandler: ((@escaping (NSSize, NSSize) -> (NSSize, SlideOverKind)) -> ())?
    func setResizeHandler(handler: @escaping (NSSize, NSSize) -> (NSSize, SlideOverKind))  {
        setResizeHandlerCallCount += 1
        if let setResizeHandlerHandler = setResizeHandlerHandler {
            setResizeHandlerHandler(handler)
        }
        
    }

    private(set) var focusSearchBarCallCount = 0
    var focusSearchBarHandler: (() -> ())?
    func focusSearchBar()  {
        focusSearchBarCallCount += 1
        if let focusSearchBarHandler = focusSearchBarHandler {
            focusSearchBarHandler()
        }
        
    }

    private(set) var applyTranslucentWindowCallCount = 0
    var applyTranslucentWindowHandler: (() -> ())?
    func applyTranslucentWindow()  {
        applyTranslucentWindowCallCount += 1
        if let applyTranslucentWindowHandler = applyTranslucentWindowHandler {
            applyTranslucentWindowHandler()
        }
        
    }

    private(set) var resetTranslucentWindowCallCount = 0
    var resetTranslucentWindowHandler: (() -> ())?
    func resetTranslucentWindow()  {
        resetTranslucentWindowCallCount += 1
        if let resetTranslucentWindowHandler = resetTranslucentWindowHandler {
            resetTranslucentWindowHandler()
        }
        
    }

    private(set) var disappearWindowCallCount = 0
    var disappearWindowHandler: ((@escaping (Bool) -> Void) -> ())?
    func disappearWindow(completion: @escaping (Bool) -> Void)  {
        disappearWindowCallCount += 1
        if let disappearWindowHandler = disappearWindowHandler {
            disappearWindowHandler(completion)
        }
        
    }

    private(set) var appearWindowCallCount = 0
    var appearWindowHandler: ((@escaping (Bool) -> Void) -> ())?
    func appearWindow(completion: @escaping (Bool) -> Void)  {
        appearWindowCallCount += 1
        if let appearWindowHandler = appearWindowHandler {
            appearWindowHandler(completion)
        }
        
    }
}

class SlideOverWindowUseCaseMock: SlideOverWindowUseCase {
    init() { }


    private(set) var setUpCallCount = 0
    var setUpHandler: (() -> ())?
    func setUp()  {
        setUpCallCount += 1
        if let setUpHandler = setUpHandler {
            setUpHandler()
        }
        
    }

    private(set) var loadWebPageCallCount = 0
    var loadWebPageArgValues = [URL?]()
    var loadWebPageHandler: ((URL?) -> ())?
    func loadWebPage(url: URL?)  {
        loadWebPageCallCount += 1
        loadWebPageArgValues.append(url)
        if let loadWebPageHandler = loadWebPageHandler {
            loadWebPageHandler(url)
        }
        
    }

    private(set) var searchGoogleCallCount = 0
    var searchGoogleArgValues = [String]()
    var searchGoogleHandler: ((String) -> ())?
    func searchGoogle(keyword: String)  {
        searchGoogleCallCount += 1
        searchGoogleArgValues.append(keyword)
        if let searchGoogleHandler = searchGoogleHandler {
            searchGoogleHandler(keyword)
        }
        
    }

    private(set) var registerInitialPageCallCount = 0
    var registerInitialPageArgValues = [URL?]()
    var registerInitialPageHandler: ((URL?) -> ())?
    func registerInitialPage(url: URL?)  {
        registerInitialPageCallCount += 1
        registerInitialPageArgValues.append(url)
        if let registerInitialPageHandler = registerInitialPageHandler {
            registerInitialPageHandler(url)
        }
        
    }

    private(set) var registerLatestPageCallCount = 0
    var registerLatestPageArgValues = [URL?]()
    var registerLatestPageHandler: ((URL?) -> ())?
    func registerLatestPage(url: URL?)  {
        registerLatestPageCallCount += 1
        registerLatestPageArgValues.append(url)
        if let registerLatestPageHandler = registerLatestPageHandler {
            registerLatestPageHandler(url)
        }
        
    }

    private(set) var registerLatestPositionCallCount = 0
    var registerLatestPositionArgValues = [SlideOverKind]()
    var registerLatestPositionHandler: ((SlideOverKind) -> ())?
    func registerLatestPosition(kind: SlideOverKind)  {
        registerLatestPositionCallCount += 1
        registerLatestPositionArgValues.append(kind)
        if let registerLatestPositionHandler = registerLatestPositionHandler {
            registerLatestPositionHandler(kind)
        }
        
    }

    private(set) var updateProgressCallCount = 0
    var updateProgressArgValues = [Double]()
    var updateProgressHandler: ((Double) -> ())?
    func updateProgress(value progress: Double)  {
        updateProgressCallCount += 1
        updateProgressArgValues.append(progress)
        if let updateProgressHandler = updateProgressHandler {
            updateProgressHandler(progress)
        }
        
    }

    private(set) var switchUserAgentCallCount = 0
    var switchUserAgentHandler: (() -> ())?
    func switchUserAgent()  {
        switchUserAgentCallCount += 1
        if let switchUserAgentHandler = switchUserAgentHandler {
            switchUserAgentHandler()
        }
        
    }

    private(set) var updateUserAgentCallCount = 0
    var updateUserAgentArgValues = [UserAgent]()
    var updateUserAgentHandler: ((UserAgent) -> ())?
    func updateUserAgent(_ userAgent: UserAgent)  {
        updateUserAgentCallCount += 1
        updateUserAgentArgValues.append(userAgent)
        if let updateUserAgentHandler = updateUserAgentHandler {
            updateUserAgentHandler(userAgent)
        }
        
    }

    private(set) var requestChangingPositionCallCount = 0
    var requestChangingPositionArgValues = [SlideOverKind]()
    var requestChangingPositionHandler: ((SlideOverKind) -> ())?
    func requestChangingPosition(type: SlideOverKind)  {
        requestChangingPositionCallCount += 1
        requestChangingPositionArgValues.append(type)
        if let requestChangingPositionHandler = requestChangingPositionHandler {
            requestChangingPositionHandler(type)
        }
        
    }

    private(set) var requestDisappearWindowCallCount = 0
    var requestDisappearWindowHandler: (() -> ())?
    func requestDisappearWindow()  {
        requestDisappearWindowCallCount += 1
        if let requestDisappearWindowHandler = requestDisappearWindowHandler {
            requestDisappearWindowHandler()
        }
        
    }

    private(set) var requestAppearWindowCallCount = 0
    var requestAppearWindowHandler: (() -> ())?
    func requestAppearWindow()  {
        requestAppearWindowCallCount += 1
        if let requestAppearWindowHandler = requestAppearWindowHandler {
            requestAppearWindowHandler()
        }
        
    }

    private(set) var showHelpPageCallCount = 0
    var showHelpPageHandler: (() -> ())?
    func showHelpPage()  {
        showHelpPageCallCount += 1
        if let showHelpPageHandler = showHelpPageHandler {
            showHelpPageHandler()
        }
        
    }
}

class ApplicationServiceMock: ApplicationService {
    init() { }
    init(appVersion: String? = nil, featurePresentVersion: String = "") {
        self.appVersion = appVersion
        self.featurePresentVersion = featurePresentVersion
    }


    private(set) var appVersionSetCallCount = 0
    var appVersion: String? = nil { didSet { appVersionSetCallCount += 1 } }

    private(set) var featurePresentVersionSetCallCount = 0
    var featurePresentVersion: String = "" { didSet { featurePresentVersionSetCallCount += 1 } }

    private(set) var openCallCount = 0
    var openArgValues = [URL]()
    var openHandler: ((URL) -> ())?
    func open(_ url: URL)  {
        openCallCount += 1
        openArgValues.append(url)
        if let openHandler = openHandler {
            openHandler(url)
        }
        
    }
}

class SlideOverComputableMock: SlideOverComputable {
    init() { }


    private(set) var computeWindowRectCallCount = 0
    var computeWindowRectArgValues = [(CGSize, CGPoint)]()
    var computeWindowRectHandler: ((CGSize, CGPoint) -> (CGRect))?
    func computeWindowRect(screenSize: CGSize, screenOffset: CGPoint) -> CGRect {
        computeWindowRectCallCount += 1
        computeWindowRectArgValues.append((screenSize, screenOffset))
        if let computeWindowRectHandler = computeWindowRectHandler {
            return computeWindowRectHandler(screenSize, screenOffset)
        }
        return .zero
    }

    private(set) var computeWindowPointCallCount = 0
    var computeWindowPointArgValues = [(CGSize, CGSize, CGPoint)]()
    var computeWindowPointHandler: ((CGSize, CGSize, CGPoint) -> (CGPoint))?
    func computeWindowPoint(windowSize: CGSize, screenSize: CGSize, screenOffset: CGPoint) -> CGPoint {
        computeWindowPointCallCount += 1
        computeWindowPointArgValues.append((windowSize, screenSize, screenOffset))
        if let computeWindowPointHandler = computeWindowPointHandler {
            return computeWindowPointHandler(windowSize, screenSize, screenOffset)
        }
        return .zero
    }

    private(set) var computeResizeCallCount = 0
    var computeResizeArgValues = [(NSSize, NSSize)]()
    var computeResizeHandler: ((NSSize, NSSize) -> (NSSize))?
    func computeResize(from current: NSSize, to next: NSSize) -> NSSize {
        computeResizeCallCount += 1
        computeResizeArgValues.append((current, next))
        if let computeResizeHandler = computeResizeHandler {
            return computeResizeHandler(current, next)
        }
        fatalError("computeResizeHandler returns can't have a default value thus its handler must be set")
    }
}

class GlobalShortcutServiceMock: GlobalShortcutService {
    init() { }


    private(set) var registerCallCount = 0
    var registerArgValues = [GlobalShortcutKey]()
    var registerHandler: ((GlobalShortcutKey, @escaping () -> Void) -> ())?
    func register(keyType: GlobalShortcutKey, action: @escaping () -> Void)  {
        registerCallCount += 1
        registerArgValues.append(keyType)
        if let registerHandler = registerHandler {
            registerHandler(keyType, action)
        }
        
    }

    private(set) var unregisterCallCount = 0
    var unregisterArgValues = [GlobalShortcutKey]()
    var unregisterHandler: ((GlobalShortcutKey) -> ())?
    func unregister(keyType: GlobalShortcutKey)  {
        unregisterCallCount += 1
        unregisterArgValues.append(keyType)
        if let unregisterHandler = unregisterHandler {
            unregisterHandler(keyType)
        }
        
    }
}

class NotificationManagerMock: NotificationManager {
    init() { }


    private(set) var pushCallCount = 0
    var pushArgValues = [(Notification.Name, Any?)]()
    var pushHandler: ((Notification.Name, Any?) -> ())?
    func push(name: Notification.Name, param: Any?)  {
        pushCallCount += 1
        pushArgValues.append((name, param))
        if let pushHandler = pushHandler {
            pushHandler(name, param)
        }
        
    }

    private(set) var observeCallCount = 0
    var observeArgValues = [Notification.Name]()
    var observeHandler: ((Notification.Name, @escaping (Any?) -> Void) -> ())?
    func observe(name: Notification.Name, handler: @escaping (Any?) -> Void)  {
        observeCallCount += 1
        observeArgValues.append(name)
        if let observeHandler = observeHandler {
            observeHandler(name, handler)
        }
        
    }
}

class SlideOverServiceMock: SlideOverService {
    init() { }


    private(set) var fixWindowCallCount = 0
    var fixWindowArgValues = [(NSWindow, SlideOverKind)]()
    var fixWindowHandler: ((NSWindow, SlideOverKind) -> ())?
    func fixWindow(for window: NSWindow, type: SlideOverKind)  {
        fixWindowCallCount += 1
        fixWindowArgValues.append((window, type))
        if let fixWindowHandler = fixWindowHandler {
            fixWindowHandler(window, type)
        }
        
    }

    private(set) var fixMovedWindowCallCount = 0
    var fixMovedWindowArgValues = [NSWindow]()
    var fixMovedWindowHandler: ((NSWindow) -> ())?
    func fixMovedWindow(for window: NSWindow)  {
        fixMovedWindowCallCount += 1
        fixMovedWindowArgValues.append(window)
        if let fixMovedWindowHandler = fixMovedWindowHandler {
            fixMovedWindowHandler(window)
        }
        
    }

    private(set) var reverseMoveWindowCallCount = 0
    var reverseMoveWindowArgValues = [NSWindow]()
    var reverseMoveWindowHandler: ((NSWindow) -> ())?
    func reverseMoveWindow(for window: NSWindow)  {
        reverseMoveWindowCallCount += 1
        reverseMoveWindowArgValues.append(window)
        if let reverseMoveWindowHandler = reverseMoveWindowHandler {
            reverseMoveWindowHandler(window)
        }
        
    }

    private(set) var arrangeWindowPositionCallCount = 0
    var arrangeWindowPositionArgValues = [(NSWindow, NSSize, SlideOverKind)]()
    var arrangeWindowPositionHandler: ((NSWindow, NSSize, SlideOverKind) -> ())?
    func arrangeWindowPosition(for window: NSWindow, size: NSSize, type: SlideOverKind)  {
        arrangeWindowPositionCallCount += 1
        arrangeWindowPositionArgValues.append((window, size, type))
        if let arrangeWindowPositionHandler = arrangeWindowPositionHandler {
            arrangeWindowPositionHandler(window, size, type)
        }
        
    }

    private(set) var hideWindowCallCount = 0
    var hideWindowArgValues = [(NSWindow, SlideOverKind)]()
    var hideWindowHandler: ((NSWindow, SlideOverKind) -> (Bool))?
    func hideWindow(for window: NSWindow, type: SlideOverKind) -> Bool {
        hideWindowCallCount += 1
        hideWindowArgValues.append((window, type))
        if let hideWindowHandler = hideWindowHandler {
            return hideWindowHandler(window, type)
        }
        return false
    }
}

class MousePointServiceMock: MousePointService {
    init() { }


    private(set) var getHorizontalSplitCallCount = 0
    var getHorizontalSplitHandler: (() -> (MousePoint.HalfHorizontal))?
    func getHorizontalSplit() -> MousePoint.HalfHorizontal {
        getHorizontalSplitCallCount += 1
        if let getHorizontalSplitHandler = getHorizontalSplitHandler {
            return getHorizontalSplitHandler()
        }
        fatalError("getHorizontalSplitHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getVerticalSplitCallCount = 0
    var getVerticalSplitHandler: (() -> (MousePoint.HalfVertical))?
    func getVerticalSplit() -> MousePoint.HalfVertical {
        getVerticalSplitCallCount += 1
        if let getVerticalSplitHandler = getVerticalSplitHandler {
            return getVerticalSplitHandler()
        }
        fatalError("getVerticalSplitHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getHorizontalQuadSplitCallCount = 0
    var getHorizontalQuadSplitHandler: (() -> (MousePoint.QuadHorizontal))?
    func getHorizontalQuadSplit() -> MousePoint.QuadHorizontal {
        getHorizontalQuadSplitCallCount += 1
        if let getHorizontalQuadSplitHandler = getHorizontalQuadSplitHandler {
            return getHorizontalQuadSplitHandler()
        }
        fatalError("getHorizontalQuadSplitHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getVerticalQuadSplitCallCount = 0
    var getVerticalQuadSplitHandler: (() -> (MousePoint.QuadVertical))?
    func getVerticalQuadSplit() -> MousePoint.QuadVertical {
        getVerticalQuadSplitCallCount += 1
        if let getVerticalQuadSplitHandler = getVerticalQuadSplitHandler {
            return getVerticalQuadSplitHandler()
        }
        fatalError("getVerticalQuadSplitHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getHorizontalCornerSplitCallCount = 0
    var getHorizontalCornerSplitHandler: (() -> (MousePoint.CornerHorizontal?))?
    func getHorizontalCornerSplit() -> MousePoint.CornerHorizontal? {
        getHorizontalCornerSplitCallCount += 1
        if let getHorizontalCornerSplitHandler = getHorizontalCornerSplitHandler {
            return getHorizontalCornerSplitHandler()
        }
        return nil
    }

    private(set) var getVerticalCornerSplitCallCount = 0
    var getVerticalCornerSplitHandler: (() -> (MousePoint.CornerVertical?))?
    func getVerticalCornerSplit() -> MousePoint.CornerVertical? {
        getVerticalCornerSplitCallCount += 1
        if let getVerticalCornerSplitHandler = getVerticalCornerSplitHandler {
            return getVerticalCornerSplitHandler()
        }
        return nil
    }
}

class WindowManagerMock: WindowManager {
    init() { }


    private(set) var lunchCallCount = 0
    var lunchArgValues = [AppWindow]()
    var lunchHandler: ((AppWindow) -> ())?
    func lunch(_ window: AppWindow)  {
        lunchCallCount += 1
        lunchArgValues.append(window)
        if let lunchHandler = lunchHandler {
            lunchHandler(window)
        }
        
    }
}

